// Remove the normal styling from hyperlinks in this particular widget
.dataCard#WidgetLeankitDiscoverySolutioningCardList td a {
    color: var(--colorThemeCardFontDefault);
    text-decoration: none;
    &:hover {
        color: var(--colorThemeWidgetLinks);
    }
}

.refreshTimeRemaining {
    padding: 6px;
    font-size: 2vw;
}

.otherDetails {
    padding-top: 20vw;
    padding-left: 1vw;
    .title {
        font-size: 1.9vw;
    }
    .body {
        font-size: 1.5vw;
    }
}

.dataCard_container {
    display: grid;

    // This now gets set dymanically by cardCard.jsx
    // grid-template-columns: repeat(6, 1fr);
    // grid-template-rows: repeat(6, 1fr);
    // height: 60vw;
    // height: 1vh;
    grid-gap: 1rem;
    margin: 0 1.5rem 0 1.5rem;

    // The width of the overall scrollbar (Chrome/Safari)
    .dataCard,
    .bodyTableContainerDiv::-webkit-scrollbar {
        width: 0.5em;
    }

    // the track (or background) of the elevator bar (Chrome/Safari)
    .dataCard,
    .bodyTableContainerDiv::-webkit-scrollbar-track {
        background-color: var(--colorThemeScrollbarTrackBackground);
        border-radius: 7px;
    }

    // the elevator bar (Chrome/Safari)
    .dataCard,
    .bodyTableContainerDiv::-webkit-scrollbar-thumb {
        background-color: var(--colorThemeScrollbarThumbBackground);
        border-radius: 7px;
    }

    .dataCard,
    .bodyTableContainerDiv {
        scrollbar-color: var(--colorThemeScrollbarThumbBackground) var(--colorThemeScrollbarTrackBackground);
    }

    .dataCard {
        background-color: var(--colorThemeCardBackground);
        color: var(--colorThemeCardFontDefault);
        border-radius: 0.2rem;
        padding: 0.5rem;
        width: 100%;
        height: 100%;

        // Center the content in the dataCard (combined with margin:auto in .cardBody)
        display: flex;
        flex-direction: column;

        overflow: auto;

        font-size: 1.4vw;
        font-family: "Nunito", "Courier New";

        // Align content - works in tandem with the display:flex in .dataCard
        // NOTE: Centering content left/right is easy without flex.  Centering up/down is tricky.  display:flex (parent) and margin:auto (child) make that easy
        margin: auto;

        min-height: 100%;
        min-width: 100%;

        // For widgets with text, I want display=inline
        // display: inline;
        // On 2019-01-20, did some experimenting, and removed this.  Testing seems fine.  Without it, seems to default to display:block

        // Typically used for large single numbers, outside of tables
        .redFont {
            color: var(--colorThemeCardFontRed);
        }
        .orangeFont {
            color: orange;
        }
        .greenFont {
            color: var(--colorThemeCardFontGreen);
        }

        .cardBody {
            // Try to center just about any div within a widget card
            div {
                text-align: center;
            }
        }

        table {
            // remove the double border between cells, make it a single border
            border-collapse: collapse;
            // Center the table left/right in it's containing div
            margin: 0 auto;

            tr {
                td {
                    border: 1px solid var(--colorThemeCardTableGridLines);
                    padding: 0.2rem 0.5rem 0.2rem 0.5rem;
                    font-size: 0.6vw;

                    &.redFont {
                        color: var(--colorThemeCardFontRed);
                        font-weight: 700;
                    }
                    &.orangeFont {
                        color: orange;
                        font-weight: 700;
                    }
                    &.greenFont {
                        color: var(--colorThemeCardFontGreen);
                        font-weight: 700;
                    }

                    &.tdRed {
                        color: var(--colorThemeCardFontRed);
                    }

                    &.blueFont {
                        color: var(--colorThemeCardFontBlue);
                        font-weight: 700;
                    }
                }
                th {
                    font-size: 0.8vw;
                    font-weight: 800;
                }
            }
        }

        // Scrolling Table Widget
        // This actually uses two tables, one table for the header row, and one for all the data
        .fullCardContainer {
            // By default, div shrink to fit the data inside it.  This forces the div it expand to the full width of it's parent
            min-width: 100%;

            .headerTable {
                // By default, div shrink to fit the data inside it.  This forces the div it expand to the full width of it's parent
                min-width: 100%;
            }
            .bodyTableContainerDiv {
                // Needs to be display:block.  div defaults to display:block, but let's just be sure
                display: block;
                // overflow only works on block elements.  Auto means no scrollbar, until content exceeds space, then add scrollbar
                overflow-x: auto;
                overflow-y: auto;
                // NOTE: height of .bodyTableContainerDiv gets set by javascript since we need to calculate in real-time

                table.scrollableTable {
                    // the idea is that this table is larger than it's parent div, and as you scroll the parent div, this table goes up and down

                    font-family: "Nunito", "Courier New";

                    // Forces table to occupy entire width of parent element, otherwise it shrinks to fit data
                    min-width: 100%;
                    tbody {
                        // Simply collapses the visual double-border between cells into a single border
                        border-collapse: collapse;
                    }

                    tr {
                        td {
                            border: 1px solid var(--colorThemeCardTableGridLines);
                            padding: 0.2rem 0.5rem 0.2rem 0.5rem;
                            font-size: 0.6vw;
                        }
                        th {
                            font-size: 0.8vw;
                            font-weight: 800;
                        }
                    }
                }
            }
        }
    }

    // This is the grid item (for charts)
    .chartJSCard {
        background-color: var(--colorThemeCardBackground);
        border-radius: 0.2rem;
        width: 100%;
        height: 100%;
        // Don't add padding here, add it to the canvas

        canvas {
            // Spacing around the canvas/chart
            padding: 1.5rem;

            background-color: var(--colorThemeCardBackground);

            // There are way to make the chart.js responsive
            // PreReq: The chart.js needs to have option:responive on it.  Probably also maintainAspectRatio:false, then there are two solutions
            // 1) The div containing this canvas needs to be a *direct* child of the grid item.  If you stick an extra <div> in there, it all falls apart (though solution #2 would still work)
            // 2) The canvas needs to have width/height as 100% !important.  This forces it's known size upwards to the divs
            // NOTE: I prefer avoiding !important, so opting for solution #1, but leaving these two lines here just in case of emergency.
            // width: 100% !important;
            // height: 100% !important;
        }
    }

    .googleChartCard {
        background-color: var(--colorThemeCardBackground);
        border-radius: 0.2rem;
        width: 100%;
        height: 100%;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;

        // Google chart creates a div, so style that immediate child as a flex item so we can easily center our content
        & > div {
            display: flex;
            align-items: center;
            justify-content: center;
        }
    }
    // .googleChartCard > div {
    //     margin: 10px auto 10px auto;
    // }
    // .googleChartCard > div > div {
    //     margin: 0 auto;
    // }

    .googleGaugeChartCard {
        background-color: var(--colorThemeCardBackground);
        border-radius: 0.2rem;
        width: 100%;
        height: 100%;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;

        .gaugeTitle {
            font-size: 3rem;
            text-align: center;
            color: var(--colorThemeCardFontDefault);
            display: block;
        }
        table {
            // Google seems to create a table to hold a gauge, and I'm trying to center the gauge horizontally
            margin: 0 auto !important;
        }
    }
    .single-num-title {
        font-size: 1.1vw;
        // line-height: 2rem;
        text-align: center;
        font-family: "Nunito", "Courier New";
        padding-bottom: 0.2vw;
    }
    .single-num-value {
        font-size: 3.3vw;
        // line-height: 4rem;
        text-align: center;
        // line-height: normal;ß
    }
    .waiting-for-data {
        padding-top: 2vw;
        font-size: 1.5vw;
        // line-height: 4rem;
        text-align: center;
        // line-height: normal;ß
    }

    .cellRed {
        background-color: var(--colorThemeCardTableCellBackgroundRed);
    }

    .cellAmber {
        background-color: var(--colorThemeCardTableCellBackgroundAmber);
    }

    .cellGreen {
        background-color: var(--colorThemeCardTableCellBackgroundGreen);
    }
}

.waiting-for-data {
    opacity: 0.35;
}

// Create a series of fonts, each one 15% bigger than the last
$previous: 0.2;
@for $i from 0 through 30 {
    .Font#{$i}x {
        font-size: $previous + vw;
        $new: $previous * 1.15;
        $previous: $new;
    }
}

.versionTitleNestedOuter {
    // Visual styling
    white-space: nowrap;
    // Positioning of outer div
    // position: absolute;
    // left: 33px;
    // top: 30px;
    // Transform: origin is top/left
    transform-origin: 0% 0%;
    // Transform goes right to left (first rotate, then translate/move)
    transform: translate(2.5vw, 15vw) rotate(90deg);
}

.versionTitleNestedInner {
    // In a nested Div, the outer div transform gets done first, then inner
    // Flip the div (set rotation-origin at center of div, then rotate 180 degrees)
    transform-origin: 50% 50%;
    transform: rotate(180deg);

    opacity: 0.2;
    color: var(--colorThemeCardFontDefault);
    font-family: "Lato", "Courier New";
}
